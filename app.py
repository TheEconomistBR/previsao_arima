import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from statsmodels.tsa.arima.model import ARIMA
from pmdarima.arima import auto_arima
from sklearn.metrics import mean_squared_error
import os

st.set_page_config(page_title="Previs√£o Agro-ARIMA", layout="wide")

# ======= ESTILO =======
st.markdown("""
<style>
h1, h2, h3 { font-family: 'Segoe UI', sans-serif; }
footer {visibility: hidden;}
.sidebar-logo {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
}
</style>
""", unsafe_allow_html=True)

# ======= CABE√áALHO COM LOGO =======
col1, col2, col3 = st.columns([1, 6, 1])
with col1:
    st.image("static/images/logo.png", width=120)
with col2:
    st.title("üìà Previs√£o de Pre√ßos Agr√≠colas no Rio Grande do Sul")
    st.caption("Modelo ARIMA ajustado para s√©ries temporais deflacionadas com RMSE dos √∫ltimos 12 meses.")


with st.expander("üë©‚Äçüéì Sobre este Projeto Acad√™mico", expanded=False):
    st.markdown("""
Este painel foi desenvolvido de forma independente por Lucas Fran√ßa e Paola Conti, mestrandos do Programa de P√≥s-Gradua√ß√£o em Agroneg√≥cios da Universidade Federal de Santa Maria (PPGAGR/UFSM-PM). A iniciativa surgiu do interesse pessoal em aplicar, de maneira pr√°tica, conceitos de s√©ries temporais a um tema relevante e concreto: os pre√ßos agropecu√°rios.

Embora n√£o esteja vinculado formalmente a uma disciplina ou disserta√ß√£o espec√≠fica, o projeto reflete a vontade de explorar as ferramentas quantitativas aprendidas em sala de aula, aliando pesquisa, visualiza√ß√£o de dados e aplica√ß√£o real.
A proposta integra elementos de:

- Modelagem de s√©ries temporais aplicadas ao agroneg√≥cio;
- Visualiza√ß√£o interativa de dados com foco em pre√ßos deflacionados;
- Apoio √† tomada de decis√£o com base em m√©tricas de desempenho como o RMSE.

Este projeto visa combinar rigor t√©cnico com aplicabilidade pr√°tica no contexto da previs√£o de pre√ßos agr√≠colas, especialmente voltada ao estado do Rio Grande do Sul.

üìö **Orienta√ß√£o:** Prof. Dr. Gabriel Nunes de Oliveira  e Vinicius 
üìÖ **Per√≠odo de desenvolvimento:** 2025
""")


# ======= EXPLICA√á√ÉO METODOL√ìGICA =======
with st.expander("üìò Sobre a Metodologia", expanded=False):
    st.markdown("""

### üìà Fontes e Defla√ß√£o

Os dados utilizados neste painel foram obtidos do **CEPEA/ESALQ/USP**, com atualiza√ß√£o mensal para diversos produtos agropecu√°rios.  
Todos os pre√ßos foram **deflacionados com base no √≠ndice IGP-DI da Funda√ß√£o Getulio Vargas (FGV)**, assegurando que as s√©ries representem valores reais ao longo do tempo.

---

### üîç O que √© ARIMA?

**ARIMA** significa:  
- **AR (p)**: Parte autoregressiva  
- **I (d)**: Parte de integra√ß√£o (diferen√ßa)  
- **MA (q)**: Parte de m√©dia m√≥vel  

O modelo ARIMA √© √∫til para **previs√£o de s√©ries temporais** e combina tr√™s componentes:

---

### üß© Par√¢metros do modelo ARIMA(p, d, q):

- **p (Autoregressivo - AR):**
  - N√∫mero de observa√ß√µes passadas consideradas como preditores.
  - **Exemplo:** p = 1 ‚Üí o valor atual depende diretamente do m√™s anterior.  
    p = 3 ‚Üí depende dos √∫ltimos tr√™s meses.
  - ‚è≥ Quanto maior o p, mais o modelo "olha para tr√°s".

- **d (Diferencia√ß√£o - I):**
  - Quantas vezes a s√©rie √© diferenciada para torn√°-la estacion√°ria.
  - **Exemplo:** d = 1 ‚Üí subtrai o valor do m√™s atual pelo m√™s anterior.
  - üìâ Se a s√©rie j√° parece est√°vel, use d = 0. Se h√° tend√™ncia, use d = 1.

- **q (M√©dia M√≥vel - MA):**
  - N√∫mero de erros passados usados para corrigir a previs√£o atual.
  - **Exemplo:** q = 1 ‚Üí o erro do √∫ltimo m√™s √© usado para ajustar a previs√£o atual.
  - üîß Alta sensibilidade a flutua√ß√µes recentes.

---

### üìò AutoARIMA

Se voc√™ ativar o **AutoARIMA**, o sistema escolhe automaticamente os melhores valores de p, d e q com base em testes estat√≠sticos (AIC, BIC). Isso ajuda a evitar ajustes manuais e otimiza o desempenho da previs√£o.

---

### üìè RMSE

O RMSE (Root Mean Squared Error) calcula o erro m√©dio da previs√£o nos √∫ltimos 12 meses. Valores menores indicam previs√µes mais pr√≥ximas dos valores reais.
""")


# ======= SIDEBAR COM LOGO =======
st.sidebar.image("static/images/logo_ufsm.png", width=120)
st.sidebar.header("Par√¢metros")

horizontes = {"6 meses": 6, "12 meses": 12, "24 meses": 24, "48 meses": 48}
horizonte_nome = st.sidebar.radio("Horizonte de Previs√£o", list(horizontes.keys()))
n_meses = horizontes[horizonte_nome]

usar_autoarima = st.sidebar.checkbox("Usar AutoARIMA (sugerir melhor modelo)", value=True)

if not usar_autoarima:
    st.sidebar.subheader("Par√¢metros ARIMA manuais")
    p = st.sidebar.slider("AR (p)", 0, 5, 2)
    d = st.sidebar.slider("Diferencia√ß√£o (d)", 0, 2, 1)
    q = st.sidebar.slider("MA (q)", 0, 5, 2)
else:
    p = d = q = None

# ======= FUN√á√ïES =======
def carregar_base():
    df = pd.read_csv("dados/base_unificada_cepea.csv", encoding="latin1")
    df.columns = [col.lower().strip() for col in df.columns]
    return df

def preparar_serie(df):
    meses = { 'janeiro': 'January', 'fevereiro': 'February', 'mar√ßo': 'March', 'abril': 'April', 'maio': 'May', 'junho': 'June', 'julho': 'July', 'agosto': 'August', 'setembro': 'September', 'outubro': 'October', 'novembro': 'November', 'dezembro': 'December' }
    df['preco_deflacionado'] = df['preco_deflacionado'].astype(str).str.replace(' ', '').str.replace(',', '.').astype(float)
    df['mes_en'] = df['mes'].str.lower().str.strip().map(meses)
    df['data'] = pd.to_datetime(df['ano'].astype(str) + '-' + df['mes_en'], format='%Y-%B', errors='coerce')
    return df.dropna(subset=['data']).sort_values('data').set_index('data')

def encontrar_melhor_arima(serie):
    modelo = auto_arima(serie, seasonal=False, stepwise=True, suppress_warnings=True)
    return modelo.order

def prever_arima(serie, steps, p, d, q):
    modelo = ARIMA(serie, order=(p,d,q)).fit()
    previsao = modelo.get_forecast(steps=steps)
    return (
        pd.date_range(serie.index[-1] + pd.offsets.MonthBegin(1), periods=steps, freq='MS'),
        previsao.predicted_mean,
        previsao.conf_int()
    )

def calcular_rmse(serie, p, d, q):
    if len(serie) < 36:
        return None
    treino = serie[:-12]
    real = serie[-12:]
    try:
        modelo = ARIMA(treino, order=(p,d,q)).fit()
        pred = modelo.forecast(12)
        return mean_squared_error(real, pred, squared=False)
    except:
        return None

def gerar_grafico(serie, datas, media, intervalo, unidade):
    customdata = np.stack([media, intervalo.iloc[:, 0], intervalo.iloc[:, 1]], axis=-1)
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=serie.index, y=serie, name="Hist√≥rico", mode="lines", line=dict(color="black")))
    fig.add_trace(go.Scatter(x=datas, y=media, name="Previs√£o ARIMA", mode="lines+markers", line=dict(color="orange"), marker=dict(size=6), customdata=customdata, hovertemplate="""<b>Data:</b> %{x|%b/%Y}<br><b>Previs√£o:</b> R$ %{customdata[0]:.2f}/""" + unidade + "<br><b>IC Inferior:</b> R$ %{customdata[1]:.2f}<br><b>IC Superior:</b> R$ %{customdata[2]:.2f}<extra></extra>"""))
    fig.add_trace(go.Scatter(x=np.concatenate([datas, datas[::-1]]), y=np.concatenate([intervalo.iloc[:, 0], intervalo.iloc[:, 1][::-1]]), fill='toself', fillcolor='rgba(255,165,0,0.2)', line=dict(color='rgba(255,255,255,0)'), showlegend=False, hoverinfo='skip'))
    fig.update_layout(title=f"Previs√£o para {n_meses} meses com ARIMA({p},{d},{q})", xaxis_title="Data", yaxis_title=f"Pre√ßo deflacionado (R$/{unidade})", template="plotly_white", height=480)
    return fig


# ======= EXECU√á√ÉO PRINCIPAL =======
df_base = carregar_base()
produtos = sorted(df_base['produto'].unique())
produto = st.selectbox("Produto:", produtos)
df_prod = preparar_serie(df_base[df_base['produto'] == produto])
serie = df_prod['preco_deflacionado']
unidade = "litro" if "leite" in produto.lower() else "saca"

if usar_autoarima:
    try:
        p, d, q = encontrar_melhor_arima(serie)
        st.sidebar.success(f"Melhor modelo sugerido: ARIMA({p},{d},{q})")
    except Exception as e:
        st.sidebar.error(f"Erro ao rodar AutoARIMA: {e}")
        p, d, q = 2, 1, 2

try:
    datas_prev, media_prev, intervalo_prev = prever_arima(serie, n_meses, p, d, q)
    rmse = calcular_rmse(serie, p, d, q)
    fig = gerar_grafico(serie, datas_prev, media_prev, intervalo_prev, unidade)
    st.plotly_chart(fig, use_container_width=True)
    
    if rmse:
        st.metric("RMSE (√∫ltimos 12 meses)", f"{rmse:.2f}")
        st.caption("O RMSE (Root Mean Squared Error) mede o erro m√©dio entre os valores reais e previstos nos √∫ltimos 12 meses da s√©rie hist√≥rica. Quanto menor o RMSE, melhor o desempenho do modelo na previs√£o recente.")
    else:
        st.warning("N√£o foi poss√≠vel calcular o RMSE (dados insuficientes).")

except Exception as e:
    st.error(f"Erro ao calcular previs√£o: {e}")




# ======= RODAP√â =======
st.markdown("---")

# Define a descri√ß√£o do modelo
modelo_usado = "AutoARIMA (sele√ß√£o autom√°tica)" if usar_autoarima else f"ARIMA escolhido manualmente ({p}, {d}, {q})"

st.markdown(f"""
üîß **Projeto desenvolvido por:** Lucas Fran√ßa e Paola Conti  
üéì Programa de P√≥s-Gradua√ß√£o em Agroneg√≥cios ‚Äì UFSM (PPGAGR/UFSM-PM)  
üìÖ Atualizado em Maio/2025  
üìà Modelo utilizado: {modelo_usado}  
üì¨ Contato: [lucas.tanaro@acad.ufsm.br](mailto:lucas.tanaro@acad.ufsm.br)
""")


